{"version":3,"sources":["Events.js","components/LoginForm.js","components/sidebar/SideBarOption.js","components/sidebar/SideBar.js","components/chats/ChatHeading.js","components/messages/Messages.js","components/messages/MessageInput.js","components/chats/ChatContainer.js","components/Layout.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","COMMUNITY_CHAT","USER_CONNECTED","MESSAGE_RECIEVED","MESSAGE_SENT","USER_DISCONNECTED","TYPING","VERIFY_USER","LOGOUT","LoginForm","props","setUser","user","isUser","setError","handleSubmit","event","preventDefault","socket","nickname","state","emit","handleChange","e","setState","target","value","error","bind","this","className","Form","onSubmit","onTouchStart","Group","controlId","Label","Control","type","size","onChange","id","required","Button","variant","Component","SideBarOption","name","active","toUpperCase","defaultProps","lastMessage","SideBar","chats","activeChat","setActiveChat","users","ref","onClick","refs","map","chat","key","get","last","messages","differenceBy","otherUser","addChatForUser","chatHeading","logout","Container","title","Messages","scrollDown","container","scrollTop","scrollHeight","prevProps","prevState","typingUsers","mes","sender","time","message","MessageInput","sendMessage","sendTyping","lastUpdateTime","Date","now","isTyping","startCheckingTyping","console","log","typingInterval","setInterval","stopCheckingTyping","clearInterval","Row","Col","md","autoComplete","placeholder","onKeyUp","keyCode","disabled","length","ChatContainer","resetChat","addChat","reset","newChats","messageEvent","typingEvent","on","updateTypingInChat","addMessageToChat","chatId","push","includes","filter","u","initSocket","off","values","socketUrl","Layout","io","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.afca3633.chunk.js","sourcesContent":["/* Eventos del chat, estos son utilizados por cada una de las acciones que realiza el usuario, desde\nabrir una nueva conexión, hasta indicar que un usuario está escribiendo */\nmodule.exports = {\n\tCOMMUNITY_CHAT:\"COMMUNITY_CHAT\",\n\tUSER_CONNECTED:\"USER_CONNECTED\",\n\tMESSAGE_RECIEVED:\"MESSAGE_RECIEVED\",\n\tMESSAGE_SENT:\"MESSAGE_SENT\",\n\tUSER_DISCONNECTED:\"USER_DISCONNECTED\",\n\tTYPING:\"TYPING\",\n\tVERIFY_USER:\"VERIFY_USER\",\n\tLOGOUT:\"LOGOUT\"\n} ","import React, { Component } from 'react';\nimport { VERIFY_USER } from '../Events'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Form, Button } from 'react-bootstrap';\n\nexport default class LoginForm extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.state = {\n\t\t\tnickname: \"\",\n\t\t\terror: \"\"\n\t\t};\n\t}\n\n\t/* Función que valida que el nombre de usuario no se repita */\n\tsetUser = ({ user, isUser }) => {\n\t\tif (isUser) {\n\t\t\tthis.setError(\"El nombre de usuario ya existe\")\n\t\t} else {\n\t\t\tthis.setError(\"\")\n\t\t\tthis.props.setUser(user)\n\t\t}\n\t}\n\n\thandleSubmit = (event) => {\n\t\tevent.preventDefault()\n\t\t\n\t\tconst { socket } = this.props\n\t\tconst { nickname } = this.state\n\t\t\n\t\tsocket.emit(VERIFY_USER, nickname, this.setUser)\t\n\t}\n\n\thandleChange = (e) => {\n\t\tthis.setState({ nickname: e.target.value })\n\t}\n\n\tsetError = (error) => {\n\t\tthis.setState({ error })\n\t}\n\n\trender() {\n\t\tconst { error } = this.state\n\t\treturn (\n\t\t\t<div className=\"login-container\">\n\t\t\t\t<h2 className=\"header\">Web-Chat: Bienvenido</h2>\n\t\t\t\t<Form onSubmit={this.handleSubmit} onTouchStart={this.handleSubmit} className=\"login-form\">\n\t\t\t\t\t<Form.Group controlId=\"formLogin\">\n\t\t\t\t\t\t<Form.Label>Nombre de usuario</Form.Label>\n\t\t\t\t\t\t<Form.Control type=\"text\"\n\t\t\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\tid=\"nickname\"\n\t\t\t\t\t\t\trequired />\n\t\t\t\t\t</Form.Group>\n\t\t\t\t\t<div className=\"error\">{error ? error : null}</div>\n\t\t\t\t\t\n\t\t\t\t\t<Button type=\"submit\" variant=\"primary\" className=\"btn-login\">Ingresar</Button>\n\t\t\t\t</Form>\n\t\t\t</div>\n\n\t\t);\n\t}\n}\n","/* Componente para renderizar los usuarios conectados en la barra lateral */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class SideBarOption extends Component {\n    static propTypes = {\n        name: PropTypes.string.isRequired,\n        lastMessage: PropTypes.string,\n        active: PropTypes.bool,\n        onClick: PropTypes.func\n    }\n\n    static defaultProps = {\n        lastMessage: \"\",\n        active: false\n    }\n\n    render() {\n        const { name, active } = this.props\n        return (\n            <div className={`user ${active ? 'active' : ''}`}>\n                <div className=\"user-photo\">{name[0].toUpperCase()}</div>\n                <div className=\"user-info\">\n                    <div className=\"name\">{name}</div>                    \n                </div>\n            </div>\n        )\n    }\n}","/* Barra lateral izquierda\n\tMuestra los usuarios que están conectados\n*/\nimport React, { Component } from 'react';\nimport { SideBarOption } from './SideBarOption'\nimport { get, last, differenceBy } from 'lodash'\n\nexport default class SideBar extends Component {\n\n\trender() {\n\t\tconst { chats, activeChat, user, setActiveChat, users } = this.props\n\t\treturn (\n\t\t\t<div id=\"side-bar\">\n\t\t\t\t<div className=\"heading\">\n\t\t\t\t\t<div className=\"app-name\">Web-Chat</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"users\"\n\t\t\t\t\tref='users'\n\t\t\t\t\tonClick={(e) => { (e.target === this.refs.user) && setActiveChat(null) }}>\n\n\t\t\t\t\t{\n\t\t\t\t\t\tchats.map((chat) => {\n\t\t\t\t\t\t\tif (chat.name) {\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<SideBarOption\n\t\t\t\t\t\t\t\t\t\tkey={chat.id}\n\t\t\t\t\t\t\t\t\t\tname={chat.name}\n\t\t\t\t\t\t\t\t\t\tlastMessage={get(last(chat.messages), 'message', '')}\n\t\t\t\t\t\t\t\t\t\tactive={activeChat.id === chat.id}\n\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn null\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\t{\n\t\t\t\t\t\tdifferenceBy(users, [user], 'name').map((otherUser) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<SideBarOption\n\t\t\t\t\t\t\t\t\tkey={otherUser.id}\n\t\t\t\t\t\t\t\t\tname={otherUser.name}\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tthis.addChatForUser(otherUser.name)\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\n\t}\n}\n","/* Encabezado del Chat\n\tMuestra el nombre de usuario del lado Izquiero\n\tMuestra la opción de abandonar el chat del lado derecho\n*/\n\nimport React, { Component } from 'react';\nimport MdEject from 'react-icons/lib/md/eject'\nimport { Container } from 'react-bootstrap'\n\nexport default class chatHeading extends Component {\n\trender() {\n\t\tconst { name, logout } = this.props\n\t\treturn (\n\t\t\t<Container className=\"chat-header\">\n\t\t\t\t<div className=\"user-info\">\n\t\t\t\t\t<div className=\"user-name\">{name}</div>\n\t\t\t\t\t<div className=\"status\">\n\t\t\t\t\t\t<div className=\"indicator\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"logout\"\n\t\t\t\t\tonClick={() => { logout() }}\n\t\t\t\t\ttitle=\"Cerrar sesión\" >\n\t\t\t\t\t<span>Salir del chat</span> <MdEject />\n\t\t\t\t</div>\n\t\t\t</Container>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\n\nexport default class Messages extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.scrollDown = this.scrollDown.bind(this)\n\t}\n\n\tscrollDown() {\n\t\tconst { container } = this.refs\n\t\tcontainer.scrollTop = container.scrollHeight\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.scrollDown()\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tthis.scrollDown()\n\t}\n\n\trender() {\n\t\tconst { messages, user, typingUsers } = this.props\n\t\treturn (\n\t\t\t<div ref='container'\n\t\t\t\tclassName=\"thread-container\">\n\t\t\t\t<div className=\"thread\">\n\t\t\t\t\t{\n\t\t\t\t\t\tmessages.map((mes) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={mes.id}\n\t\t\t\t\t\t\t\t\tclassName={`message-container ${mes.sender === user.name && 'right'}`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"time\">{mes.time}</div>\n\t\t\t\t\t\t\t\t\t<div className=\"data\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"message\">{mes.message}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"name\">{mes.sender}</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\t{\n\t\t\t\t\t\ttypingUsers.map((name) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div key={name} className=\"typing-user\">\n\t\t\t\t\t\t\t\t\t{`${name} está escribiendo...`}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</div>\n\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport { Button, Form, Row, Col } from 'react-bootstrap'\n\nexport default class MessageInput extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tmessage: \"\",\n\t\t\tisTyping: false\n\t\t};\n\n\t}\n\n\thandleSubmit = (e) => {\n\t\te.preventDefault()\n\t\tthis.sendMessage()\n\t\tthis.setState({ message: \"\" })\n\t}\n\n\tsendMessage = () => {\n\t\tthis.props.sendMessage(this.state.message)\n\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.stopCheckingTyping()\n\t}\n\n\tsendTyping = () => {\n\t\tthis.lastUpdateTime = Date.now()\n\t\tif (!this.state.isTyping) {\n\t\t\tthis.setState({ isTyping: true })\n\t\t\tthis.props.sendTyping(true)\n\t\t\tthis.startCheckingTyping()\n\t\t}\n\t}\n\n\t/*\n\t\tListener para revisar cada 3 milesimas desegundo si algún usuario está escribiendo\n\t*/\n\tstartCheckingTyping = () => {\n\t\tconsole.log(\"Escribiendo...\");\n\t\tthis.typingInterval = setInterval(() => {\n\t\t\tif ((Date.now() - this.lastUpdateTime) > 300) {\n\t\t\t\tthis.setState({ isTyping: false })\n\t\t\t\tthis.stopCheckingTyping()\n\t\t\t}\n\t\t}, 300)\n\t}\n\n\t/*\n\t\tCuando el usuario termina de escribir, limpia el renderizado/mensaje\n\t*/\n\tstopCheckingTyping = () => {\n\t\tif (this.typingInterval) {\n\t\t\tclearInterval(this.typingInterval)\n\t\t\tthis.props.sendTyping(false)\n\t\t}\n\t}\n\n\n\trender() {\n\t\tconst { message } = this.state\n\t\treturn (\n\t\t\t<div className=\"message-input\" >\n\t\t\t\t<Form onSubmit={this.handleSubmit} >\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col md=\"10\">\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\tid=\"message\"\n\t\t\t\t\t\t\t\tref={\"messageinput\"}\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\t\t\t\tvalue={message}\n\t\t\t\t\t\t\t\tautoComplete={'off'}\n\t\t\t\t\t\t\t\tplaceholder=\"Mensaje\"\n\t\t\t\t\t\t\t\tonKeyUp={e => { e.keyCode !== 13 && this.sendTyping() }}\n\t\t\t\t\t\t\t\tonChange={\n\t\t\t\t\t\t\t\t\t({ target }) => {\n\t\t\t\t\t\t\t\t\t\tthis.setState({ message: target.value })\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col md=\"1\">\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tdisabled={message.length < 1}\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tvariant=\"success\"\n\t\t\t\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\t\t\t> Enviar </Button>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport SideBar from '../sidebar/SideBar'\nimport {\n\tCOMMUNITY_CHAT, MESSAGE_SENT, MESSAGE_RECIEVED, TYPING,\n\tUSER_CONNECTED, USER_DISCONNECTED\n} from '../../Events'\nimport ChatHeading from './ChatHeading'\nimport Messages from '../messages/Messages'\nimport MessageInput from '../messages/MessageInput'\nimport { values } from 'lodash'\n\nexport default class ChatContainer extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tchats: [],\n\t\t\tusers: [],\n\t\t\tactiveChat: null\n\t\t};\n\t}\n\n\t/* Inicializar el socket al cargar el DOM */\n\tcomponentDidMount() {\n\t\tconst { socket } = this.props\n\t\tthis.initSocket(socket)\n\t}\n\n\t/* Cerrar el hilo del socket por cada usuario que se desconecte */\n\tcomponentWillUnount() {\n\t\tconst { socket } = this.props\n\t\tsocket.off(USER_CONNECTED)\n\t\tsocket.off(USER_DISCONNECTED)\n\t}\n\n\t\n\tinitSocket(socket) {\n\t\tsocket.emit(COMMUNITY_CHAT, this.resetChat)\n\t\tsocket.on('connect', () => {\n\t\t\tsocket.emit(COMMUNITY_CHAT, this.resetChat)\n\t\t})\n\t\tsocket.on(USER_CONNECTED, (users) => {\n\t\t\tthis.setState({ users: values(users) })\n\t\t})\n\n\t\tsocket.on(USER_DISCONNECTED, (users) => {\n\t\t\tthis.setState({ users: values(users) })\n\t\t})\n\t}\n\n\t/*\n\t\tReinicia el chat para las nuevas conexiones\n\t*/\n\tresetChat = (chat) => {\n\t\treturn this.addChat(chat, true)\n\t}\n\n\t/*\n\t\tAgrega cada chat a la caja de chats, si es nueva conexion entonces reset es verdadero y\n\t\tmuestra la caja vacía.\n\t\tEsta funcion muestra el mensaje o inidca cuando un usuario está escribiendo el mensaje\n\t*/\n\taddChat = (chat, reset) => {\n\t\tconst { socket } = this.props\n\t\tconst { chats } = this.state\n\n\t\tconst newChats = reset ? [chat] : [...chats, chat]\n\t\tthis.setState({ chats: newChats, activeChat: reset ? chat : this.state.activeChat })\n\n\t\tconst messageEvent = `${MESSAGE_RECIEVED}-${chat.id}`\n\t\tconst typingEvent = `${TYPING}-${chat.id}`\n\n\t\tsocket.on(typingEvent, this.updateTypingInChat(chat.id))\n\t\tsocket.on(messageEvent, this.addMessageToChat(chat.id))\n\t}\n\n\t/*\n\t\tFuncion que regresa cada mensaje del chat con el ID de quien lo escribió\n\t*/\n\taddMessageToChat = (chatId) => {\n\t\treturn message => {\n\t\t\tconst { chats } = this.state\n\t\t\tlet newChats = chats.map((chat) => {\n\t\t\t\tif (chat.id === chatId)\n\t\t\t\t\tchat.messages.push(message)\n\t\t\t\treturn chat\n\t\t\t})\n\n\t\t\tthis.setState({ chats: newChats })\n\t\t}\n\t}\n\n\t/*\n\t\tFunción que indica quien esta escribiendo un mensaje\n\t*/\n\tupdateTypingInChat = (chatId) => {\n\t\treturn ({ isTyping, user }) => {\n\t\t\tif (user !== this.props.user.name) {\n\n\t\t\t\tconst { chats } = this.state\n\n\t\t\t\tlet newChats = chats.map((chat) => {\n\t\t\t\t\tif (chat.id === chatId) {\n\t\t\t\t\t\tif (isTyping && !chat.typingUsers.includes(user)) {\n\t\t\t\t\t\t\tchat.typingUsers.push(user)\n\t\t\t\t\t\t} else if (!isTyping && chat.typingUsers.includes(user)) {\n\t\t\t\t\t\t\tchat.typingUsers = chat.typingUsers.filter(u => u !== user)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn chat\n\t\t\t\t})\n\t\t\t\tthis.setState({ chats: newChats })\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t\tAgrega el mensaje al servidor para renderizarlo\n\t*/\n\tsendMessage = (chatId, message) => {\n\t\tconst { socket } = this.props\n\t\tsocket.emit(MESSAGE_SENT, { chatId, message })\n\t}\n\n\t/*\n\t\tAgrega el estado de ecritura al servidor para renderizarlo\n\t*/\n\tsendTyping = (chatId, isTyping) => {\n\t\tconst { socket } = this.props\n\t\tsocket.emit(TYPING, { chatId, isTyping })\n\t}\n\n\tsetActiveChat = (activeChat) => {\n\t\tthis.setState({ activeChat })\n\t}\n\trender() {\n\t\tconst { user, logout } = this.props\n\t\tconst { chats, activeChat, users } = this.state\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<SideBar\n\t\t\t\t\tlogout={logout}\n\t\t\t\t\tchats={chats}\n\t\t\t\t\tuser={user}\n\t\t\t\t\tusers={users}\n\t\t\t\t\tactiveChat={activeChat}\n\t\t\t\t\tsetActiveChat={this.setActiveChat}\n\t\t\t\t/>\n\t\t\t\t<div className=\"chat-room-container\">\n\t\t\t\t\t{\n\t\t\t\t\t\tactiveChat !== null ? (\n\n\t\t\t\t\t\t\t<div className=\"chat-room\">\n\t\t\t\t\t\t\t\t<ChatHeading name={user.name} logout={logout} />\n\t\t\t\t\t\t\t\t<Messages\n\t\t\t\t\t\t\t\t\tmessages={activeChat.messages}\n\t\t\t\t\t\t\t\t\tuser={user}\n\t\t\t\t\t\t\t\t\ttypingUsers={activeChat.typingUsers}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<MessageInput\n\t\t\t\t\t\t\t\t\tsendMessage={\n\t\t\t\t\t\t\t\t\t\t(message) => {\n\t\t\t\t\t\t\t\t\t\t\tthis.sendMessage(activeChat.id, message)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tsendTyping={\n\t\t\t\t\t\t\t\t\t\t(isTyping) => {\n\t\t\t\t\t\t\t\t\t\t\tthis.sendTyping(activeChat.id, isTyping)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) :\n\t\t\t\t\t\t\t<div className=\"chat-room choose\">\n\t\t\t\t\t\t\t\t<h3>Chat vacío</h3>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport io from 'socket.io-client'\nimport { USER_CONNECTED, LOGOUT } from '../Events'\nimport LoginForm from './LoginForm'\nimport ChatContainer from './chats/ChatContainer'\n\nconst socketUrl = \"/\"\nexport default class Layout extends Component {\n\t\n\tconstructor(props) {\n\t  super(props);\n\t\n\t  this.state = {\n\t  \tsocket:null,\n\t  \tuser:null\n\t  };\n\t}\n\n\tcomponentWillMount() {\n\t\tthis.initSocket()\n\t}\n\n\t/*\n\t\tConexión que inicializa el socket\n\t*/\n\tinitSocket = ()=>{\n\t\tconst socket = io(socketUrl)\n\n\t\tsocket.on('connect', ()=>{\n\t\t\tconsole.log(\"Conectado\");\n\t\t})\n\t\t\n\t\tthis.setState({socket})\n\t}\n\n\t/*\n\t\tEstablece el id del usuario el el socket\n\t*/\t\n\tsetUser = (user)=>{\n\t\tconst { socket } = this.state\n\t\tsocket.emit(USER_CONNECTED, user);\n\t\tthis.setState({user})\n\t}\n\n\t/*\n\t\tLimpua el estado del socket cuando el usuario se desconecta\n\t*/\n\tlogout = ()=>{\n\t\tconst { socket } = this.state\n\t\tsocket.emit(LOGOUT)\n\t\tthis.setState({user:null})\n\n\t}\n\n\n\trender() {\n\t\tconst { socket, user } = this.state\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t{\n\t\t\t\t\t!user ?\t\n\t\t\t\t\t<LoginForm socket={socket} setUser={this.setUser} />\n\t\t\t\t\t:\n\t\t\t\t\t<ChatContainer socket={socket} user={user} logout={this.logout}/>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport Layout from './components/Layout'\nimport './index.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <Layout />\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}